/*
Auto-generated by: https://github.com/zira-games/gltfjsx
Command: npx zira-gltfjsx@6.7.0 ./tangentSpace.gltf --preload false --exportdata --transform --types --shadows --meta --ref --root ./ --output ./tangentSpace.tsx --transformoutput ./tangentSpace-transformed.glb 
Files: ./tangentSpace.gltf [5.72MB] > C:\Users\berat\Repos\gltfjsx\tangentSpace-transformed.glb [694.81KB] (88%)
*/

import * as THREE from 'three'
import { forwardRef, Ref } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Dun: THREE.Mesh
    Ground: THREE.Mesh
  }
  materials: {
    sun: THREE.MeshStandardMaterial
    floor: THREE.MeshStandardMaterial
  }
  animations: []
}

export const Model = forwardRef((props: JSX.IntrinsicElements['group'], ref: Ref<THREE.Group>) => {
  const { nodes, materials } = useGLTF('/tangentSpace-transformed.glb') as GLTFResult
  return (
    <group ref={ref} {...props} dispose={null}>
      <pointLight intensity={2717.571} decay={2} position={[0, 1.75, 4]} rotation={[-1.839, 0.602, 1.932]} userData={{ name: 'Light' }} />
      <mesh castShadow receiveShadow geometry={nodes.Dun.geometry} material={materials.sun} position={[0, 0.15, 2.5]} scale={[0.627, 0.627, 0.14]} userData={{ name: 'Dun' }} />
      <mesh castShadow receiveShadow geometry={nodes.Ground.geometry} material={materials.floor} scale={0.43} userData={{ name: 'Ground' }} />
    </group>
  )
})

export const UserData = { name: 'Ground' }
